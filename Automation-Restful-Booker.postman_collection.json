{
  "info": {
    "_postman_id": "35db2501-e415-46e3-b85b-76a146686d01",
    "name": "Automation Restful-Booker",
    "description": "# Welcome to Restful-Booker!\n\n_**Can you find all the bugs in this API?**_\n\nWelcome to Restful-booker an API that you can use to learn more about API Testing or try out API testing tools against. Restful-booker is a **C**reate **R**ead **U**pdate **D**elete Web API that comes with authentication features and loaded with a bunch of bugs for you to explore.\n\n## Where is the API?\n\nYou can find the code for Restful-booker on GitHub here: [https://github.com/mwinteringham/restful-booker](https://github.com/mwinteringham/restful-booker)\n\nYou can find a deployed instance at [https://restful-booker.herokuapp.com/](https://restful-booker.herokuapp.com/)\n\nThe API comes pre-loaded with 10 records for you to work with **and resets itself every 10 minutes back to that default state.** It also comes with [detailed API documentation](https://restful-booker.herokuapp.com/apidoc/index.html) to help get you started with your API testing straight away.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26378767"
  },
  "item": [
    {
      "name": "/auth - Create token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "//qase: 1",
              "//store response into variable",
              "const responseAuth = pm.response.json()",
              "",
              "//verify response status code is 200",
              "pm.test(\"Verify response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "//verify body response",
              "pm.test(\"Verify body response\", function () {",
              "    pm.expect(responseAuth).haveOwnProperty(\"token\")",
              "});",
              "",
              "//get and store token into collection variable",
              "const tokenAuth = responseAuth.token",
              "pm.collectionVariables.set(\"G_tokenAuth\", tokenAuth)",
              "",
              "//veriify json schema",
              "const jsonSchemas = {",
              "  \"type\": \"object\",",
              "  \"properties\": {",
              "    \"token\": {",
              "      \"type\": \"string\"",
              "    }",
              "  },",
              "  \"required\": [",
              "    \"token\"",
              "  ]",
              "}",
              "",
              "pm.test(\"Verify json schema\", function () {",
              "    pm.response.to.have.jsonSchema(jsonSchemas)",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
        },
        "url": {
          "raw": "https://restful-booker.herokuapp.com/auth",
          "protocol": "https",
          "host": ["restful-booker", "herokuapp", "com"],
          "path": ["auth"]
        },
        "description": "Sending a request to this endpoint will generate a token that can be used in the Cookie header for PUT /booking/{id} and DELETE /booking/{id}"
      },
      "response": []
    },
    {
      "name": "/booking - Create booking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "//qase: 2",
              "//store response into variable",
              "const responseCreateBooking = pm.response.json()",
              "",
              "//verify response status code is 200",
              "pm.test(\"Verify response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "//verify body response",
              "const bookId = responseCreateBooking.bookingid",
              "const fname = responseCreateBooking.booking.firstname",
              "const lname = responseCreateBooking.booking.lastname",
              "",
              "pm.test(\"Verify body response\", function () {",
              "    pm.expect(responseCreateBooking).haveOwnProperty(\"bookingid\")",
              "    //get generate random firstname and lastname",
              "    const firstname = pm.collectionVariables.get(\"G_firstname\")",
              "    const lastname = pm.collectionVariables.get(\"G_lastname\")",
              "    pm.expect(fname).to.eql(firstname)",
              "    pm.expect(lname).to.eql(lastname)",
              "});",
              "",
              "//store booking id into collection variable",
              "pm.collectionVariables.set(\"G_bookingId\", bookId)",
              "",
              "//verivfy json schema",
              "const jsonSchemas = {",
              "  \"type\": \"object\",",
              "  \"properties\": {",
              "    \"bookingid\": {",
              "      \"type\": \"integer\"",
              "    },",
              "    \"booking\": {",
              "      \"type\": \"object\",",
              "      \"properties\": {",
              "        \"firstname\": {",
              "          \"type\": \"string\"",
              "        },",
              "        \"lastname\": {",
              "          \"type\": \"string\"",
              "        },",
              "        \"totalprice\": {",
              "          \"type\": \"integer\"",
              "        },",
              "        \"depositpaid\": {",
              "          \"type\": \"boolean\"",
              "        },",
              "        \"bookingdates\": {",
              "          \"type\": \"object\",",
              "          \"properties\": {",
              "            \"checkin\": {",
              "              \"type\": \"string\"",
              "            },",
              "            \"checkout\": {",
              "              \"type\": \"string\"",
              "            }",
              "          },",
              "          \"required\": [",
              "            \"checkin\",",
              "            \"checkout\"",
              "          ]",
              "        },",
              "        \"additionalneeds\": {",
              "          \"type\": \"string\"",
              "        }",
              "      },",
              "      \"required\": [",
              "        \"firstname\",",
              "        \"lastname\",",
              "        \"totalprice\",",
              "        \"depositpaid\",",
              "        \"bookingdates\",",
              "        \"additionalneeds\"",
              "      ]",
              "    }",
              "  },",
              "  \"required\": [",
              "    \"bookingid\",",
              "    \"booking\"",
              "  ]",
              "}",
              "",
              "pm.test(\"Verify json schemas\", function () {",
              "    pm.response.to.have.jsonSchema(jsonSchemas)",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "/*",
              "generate random firstname and lastname",
              "and",
              "store it into collection variable",
              "*/",
              "const generateFirstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")",
              "const generateLastname = pm.variables.replaceIn(\"{{$randomFirstName}}\")",
              "",
              "pm.collectionVariables.set(\"G_firstname\", generateFirstname)",
              "pm.collectionVariables.set(\"G_lastname\", generateLastname)"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"firstname\" : \"{{G_firstname}}\",\n    \"lastname\" : \"{{G_lastname}}\",\n    \"totalprice\" : {{$randomPrice}},\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2024-10-10\",\n        \"checkout\" : \"2024-10-10\"\n    },\n    \"additionalneeds\" : \"{{$randomLoremWords}}\"\n}"
        },
        "url": {
          "raw": "https://restful-booker.herokuapp.com/booking",
          "protocol": "https",
          "host": ["restful-booker", "herokuapp", "com"],
          "path": ["booking"]
        },
        "description": "Request that allows you to create a Booking within the API. This request creates the booking using JSON."
      },
      "response": []
    },
    {
      "name": "/booking/:id - Get booking by id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "//qase: 3",
              "//store response into variable",
              "const responseGetBookingId = pm.response.json()",
              "",
              "//verify response status code is 200",
              "pm.test(\"Verify response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "//verify json schema",
              "const jsonSchemas = {",
              "  \"type\": \"object\",",
              "  \"properties\": {",
              "    \"firstname\": {",
              "      \"type\": \"string\"",
              "    },",
              "    \"lastname\": {",
              "      \"type\": \"string\"",
              "    },",
              "    \"totalprice\": {",
              "      \"type\": \"integer\"",
              "    },",
              "    \"depositpaid\": {",
              "      \"type\": \"boolean\"",
              "    },",
              "    \"bookingdates\": {",
              "      \"type\": \"object\",",
              "      \"properties\": {",
              "        \"checkin\": {",
              "          \"type\": \"string\"",
              "        },",
              "        \"checkout\": {",
              "          \"type\": \"string\"",
              "        }",
              "      },",
              "      \"required\": [",
              "        \"checkin\",",
              "        \"checkout\"",
              "      ]",
              "    },",
              "    \"additionalneeds\": {",
              "      \"type\": \"string\"",
              "    }",
              "  },",
              "  \"required\": [",
              "    \"firstname\",",
              "    \"lastname\",",
              "    \"totalprice\",",
              "    \"depositpaid\",",
              "    \"bookingdates\",",
              "    \"additionalneeds\"",
              "  ]",
              "}",
              "",
              "pm.test(\"Verify json schemas\", function () {",
              "    pm.response.to.have.jsonSchema(jsonSchemas)",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://restful-booker.herokuapp.com/booking/{{G_bookingId}}",
          "protocol": "https",
          "host": ["restful-booker", "herokuapp", "com"],
          "path": ["booking", "{{G_bookingId}}"]
        },
        "description": "Requests a specific booking that exists within the API. To get a list of valid booking IDs using GetBookingIds calls."
      },
      "response": []
    },
    {
      "name": "/booking/:id - Update booking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "//qase: 4",
              "//store response into variable",
              "const responseUpdateBooking = pm.response.json()",
              "",
              "//verify response status code is 200",
              "pm.test(\"Verify response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "//verify json schemas",
              "const jsonSchemas = {",
              "  \"type\": \"object\",",
              "  \"properties\": {",
              "    \"firstname\": {",
              "      \"type\": \"string\"",
              "    },",
              "    \"lastname\": {",
              "      \"type\": \"string\"",
              "    },",
              "    \"totalprice\": {",
              "      \"type\": \"integer\"",
              "    },",
              "    \"depositpaid\": {",
              "      \"type\": \"boolean\"",
              "    },",
              "    \"bookingdates\": {",
              "      \"type\": \"object\",",
              "      \"properties\": {",
              "        \"checkin\": {",
              "          \"type\": \"string\"",
              "        },",
              "        \"checkout\": {",
              "          \"type\": \"string\"",
              "        }",
              "      },",
              "      \"required\": [",
              "        \"checkin\",",
              "        \"checkout\"",
              "      ]",
              "    },",
              "    \"additionalneeds\": {",
              "      \"type\": \"string\"",
              "    }",
              "  },",
              "  \"required\": [",
              "    \"firstname\",",
              "    \"lastname\",",
              "    \"totalprice\",",
              "    \"depositpaid\",",
              "    \"bookingdates\",",
              "    \"additionalneeds\"",
              "  ]",
              "}",
              "",
              "pm.test(\"Verify json schemas\", function () {",
              "    pm.response.to.have.jsonSchema(jsonSchemas)",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disabledSystemHeaders": {}
      },
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          },
          {
            "key": "Cookie",
            "value": "token={{G_tokenAuth}}"
          },
          {
            "key": "Authorization",
            "value": "b72f0dc36c04108",
            "type": "text",
            "disabled": true
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"firstname\": \"{{G_firstname}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"totalprice\": 900,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2024-10-10\",\n        \"checkout\": \"2024-10-10\"\n    },\n    \"additionalneeds\": \"{{$randomLoremWords}}\"\n}"
        },
        "url": {
          "raw": "https://restful-booker.herokuapp.com/booking/{{G_bookingId}}",
          "protocol": "https",
          "host": ["restful-booker", "herokuapp", "com"],
          "path": ["booking", "{{G_bookingId}}"]
        },
        "description": "Request that allows you to update a complete Booking within the API. This request updates the booking using JSON.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
      },
      "response": []
    },
    {
      "name": "/booking/:id - Delete booking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": ["//qase: 5"],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Cookie",
            "value": "token={{G_tokenAuth}}"
          }
        ],
        "url": {
          "raw": "https://restful-booker.herokuapp.com/booking/{{G_bookingId}}",
          "protocol": "https",
          "host": ["restful-booker", "herokuapp", "com"],
          "path": ["booking", "{{G_bookingId}}"]
        },
        "description": "Request that allows you to delete a Booking within the API.\n\n**Authorisation**\n\nThis request requires you to be authorised. Which can be done in one of two ways:\n\n1.  **Basic Auth -** Create a basic authorization header using Basic Auth with the credentials admin/password123\n2.  **Cookie based -** Create a cookie header with the value `token=abc123`. To get a valid token, send a request to `POST /auth`"
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "G_tokenAuth",
      "value": ""
    },
    {
      "key": "G_bookingId",
      "value": ""
    },
    {
      "key": "G_firstname",
      "value": ""
    },
    {
      "key": "G_lastname",
      "value": ""
    }
  ]
}
